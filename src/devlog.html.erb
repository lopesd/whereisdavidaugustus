<html>
  <head>
    <!-- GOOGLE ANALYTICS -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-180773758-1"></script>
    <script>
      window.dataLayer = window.dataLayer || []
      function gtag(){dataLayer.push(arguments)}
      gtag('js', new Date())
      gtag('config', 'UA-180773758-1')
    </script>


    <!-- TITLE N SHIT -->
    <title>Where is David Augustus? | DEVLOG</title>
    <meta name="description" content="where tho?">
    <meta name="keywords" content="where, is, david, augustus, motorcycle, trip">
    <meta name="author" content="David Augustus Schalkwijk Lopes">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- CONFIG -->
    <meta charset="utf-8"/>

    <!-- FAVICON -->
    <link rel="icon" href="./assets/favicon.png">

    <!-- CSS -->
    <link rel="stylesheet" href="css/base.<%= build_version_id %>.css">
    <link rel="stylesheet" href="css/devlog.<%= build_version_id %>.css">
  </head>

  <body>
    <main>
      <!-- HEADER -->
      <div id="header">
        <div id="header-content">
          <a id="header-home-link" href="./index.html">HOME</a>
          <div class="header-vertical-line"></div>
          <a id="header-peepers-link" href="./peepers.html">PEEPERS</a>
          <div class="header-vertical-line"></div>
          <a id="header-devlog-link" class="current-page" href="./devlog.html">DEVLOG</a>
        </div>
      </div>

      <div id="main-gutters">
        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Wed Mar 17 2021 22:48PM | </span><b>Move to Mobile |</b> I'm sure you've noticed the /peepers tab. I didn't cover it with a devlog entry but to be fair it was a fairly simple implementation. It's always fun to write simple little algorithms like the one used to determine who has the longest streak.

The next big thing I'm cooking up isn't very user facing. One of my main issues with this website as a user is that posting checkins can be a bit of a pain. I've been doing so via a little bare-bones webform into which I had to manually punch in my AWS credentials - yikes! The image selection process is also cumbersome and doesn't allow for rearranging or organizing them at will - plus the fact that it's a webpage means that if I accidentally swipe the wrong way I'll refresh the page and lose everything I typed! Which is pretty annoying if I'm doing one of my wordier posts.

So I decided to move my checkin tool to a mobile app. While not strictly necessary for most of the improvements I want, a mobile app will allow me to implement some cool features down the road that require running in the background. And while I'm at it, I figured it was the right time to hook into Cognito for proper user credentials (I KNOW I KNOW I SHOULD'VE DONE THIS FOREVER AGO), and use AWS API Gateway to abstract checkin upload logic as opposed to manually pushing checkins to the database from the client. I'm raising the bar up from "just get the job done" to "I don't want to lose track when enumerating the corners I cut".

Part of this is due to the fact that I've been considering keeping this website around for the long run. Even after I've stopped being a digital nomad bum, I think it'll be fun to create a new chapter every once in a while to track a weekend trip or a long vacation. Also, I think it'd be nice to have something technical to show potential employers to account for my extended time off, so I'm going to make sure I keep the bar high from now on.

Side note: I read a blog entry about how easy it was to hack an AWS account due to misconfigured Cognito and overly permissive Lambdas... and it scared me straight. Now I only grant resources the absolute bare minimum permissions they need to function, down to the target resource ARN.

<img title="you want hovertext? this isn't xkcd" class="devlog-entry-image" src="./media/images/android-app.png" />

<b>Links:</b>
<a href="https://notsosecure.com/hacking-aws-cognito-misconfigurations">NotSoSecure: Hacking AWS Cognito Misconfigurations</a></div>
        </div>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Wed Jan 6 2021 3:04PM | </span><b>Dynamic static peeps | </b>Alright! So, I took a bit of a risk by implementing Ivan's idea of keeping only the open peeps dynamic and all the claimed peeps static (I should mention, he only briefly mentioned this idea in passing and wasn't necessarily giving it his stamp of approval).

For the non-technically inclined that venture into the devlog (you're welcome here too!), here's what I mean with these keywords. "Static" website content loosely means content that doesn't change very often (blog posts are the classic example). As such, its HTML is usually rendered beforehand, and handed to the client - aka your browser - immediately after the request for the website is made. So if this website were entirely static, this would be the chain of events:

- 1: browser requests data from whereisdavidaugustus.com
- 2: server responds with HTML/CSS/JS representing the entire website
- 3: browser can render that HTML immediately with no further requests needed
  - (except separate requests for images, videos, assets, and services like Google maps)

With "dynamic" content, what happens instead is this:

- 1: browser requests data from whereisdavidaugustus.com
- 2: server responds with HTML/CSS/JS represting most of the website, but not the dynamic content (like checkins or peeps for example)
- 3: the JS that the client just acquired requests data from a different endpoint (for example, whereisdavidaugustus.com/peep)
- 4: the server behind that endpoint responds with data (for example JSON) representing the peeps
- 5: the JS then generates HTML <i>on the fly</i> given that data
- 6: the JS sticks that generated HTML into the appropriate place in the existing website

Why would we ever follow the second pattern? Tons of reasons. We might need to customize content for each user, or we might need to show stuff that changes very often. We might want to allow the user to page through data without having to refresh the entire page.

In the peep case, we need the peeper to update quickly and accurately! And yet, once a peeper is locked in, that name doesn't change. So I decided to take advantage of that and leave open peeps dynamic (the website will send a request to the backend database to make sure it's open) and claimed peeps static (the website will already include the HTML representing claimed peeps, and save the browser the trouble of having to check again with the database).

In the backend, I keep a DynamoDB database up-to-date with all existing peeps. When a new peep gets claimed, the main peep lambda updates the entry in the database, and asynchronously (without waiting for completion) calls a second lambda that replicates this peep in the static content repo used to build the website. No big deal if this lambda fails - it's not doing anything super important (no customer impact except for saving a little bandwidth). I'm not particularly thrilled about having peep data stored in two different places as this violates the single source of truth principle, but it was sort of inevitable given that I needed a data store accessible at build time, and using a code repo as a database felt... wrong. But IDK. I'm open to suggestions. Let me know what I did wrong!
        </div>
      </div>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Tue Dec 15 2020 7:32AM | </span><b>AWS and Google sent me angry emails | </b>From the start of this project, one of my biggest objectives was keeping this website loading as fast as possible. It was originally designed as a low-key SPA (single page application) that would fetch checkins from the backend and render them in the browser. As the number of checkins grew it became obvious that some pre-rendering would be needed if I really wanted to keep it crispy - so I've had a wonderful time in the last few days re-architecting this thing into a mostly static website.

I finally uploaded my source code to GitHub. Link below. Big oops though: my git commit history apparently contains my AWS Access Key and Google Maps API Key in plaintext?? Weird, someone must've snuck in at night and committed those. AWS and Google both let me know via email that I needed to rotate those creds as soon as I could. Hey it's good to know they're scraping GitHub and looking out for you!

Some bullet points to keep it digestible:

- I created stronger separations between my source code and content. Images and videos have their own directory on my local machine and go into their own S3 bucket. I used distribution behaviors in CloudFront to make sure the same distribution fronts both the website source and its content.

- Giulio was right, you learn the most by just messing around with the AWS console. I took a nosedive approach to AWS CodePipeline and do not regret it. Pushing code to my main GitHub branch triggers a build and a deploy.

- My build step runs a simple Rakefile that uses ERB (embedded Ruby) to template the source files (index.html.erb most notably). Did you know ERB is part of the Ruby standard library???

- TODO: Get peeps working again. Since the website is now static, triggering a peep doesn't do much. Ivan's idea of keeping only the latest open peep dynamic and statically generating the HTML for all claimed peeps is a good one. I still need some creative thinking to make peeps seem quick and seamless though. Might have to use HTML local storage, aka fancy cookies.

Speaking of, I'm hungry. And I didn't get a wink of sleep.

<b>Links:</b>
<a href="https://github.com/lopesd/whereisdavidaugustus">whereisdavidaugustus (GitHub)</a>
          </div>
        </div>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Fri Oct 30 2020 1:27PM | </span><b>Backfilling image dimensions | </b>I thought my days of running backfill scripts were over. Today I wrote some Ruby to grab the dimensions of every checkin image and augment the checkin JSON with those dimensions. This is needed because if you don't set width and height of the image tag before it fully loads, the page won't preallocate the right amount of room for each image. So if the user scrolls down past the images while they are still loading, the page will appear to flicker as the HTML updates the sizes of the img tags.

I wasn't planning on fixing this bug yet but since I'm planning on pushing some features that require a consistent scrolling experience, the priority got bumped.</div>
        </div>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Thu Oct 29 2020 10:14PM |</span><b> GoPro video and GPS data trimming |</b> My ultimate goal with this feature is to be able to display a GoPro video within a checkin, while the map on the left displays the video's route and an icon that follows along the route in step with the video (basically like an aerial view). I've made some significant steps and have a working prototype, but there are a few more hurdles and design decisions to make before this thing is just the way I want it.

TL;DR: GoPros since the Hero5 sample GPS coordinates multiple times per second while recording. This GPS data, alongside a lot of other telemetry, is encoded as a track within the MP4 files alongside the video and audio streams, in a format called GPMF (GoPro Metadata Format). Which is super cool! A combination of two open-source tools (gpmf-extract and gopro-telemetry) allow you to extract and export the data automatically as GeoJSON, from which you can easily read the lat/lng coordinates array, match them with their corresponding entries in the relative milliseconds array (it's called RelativeMicroSeconds, but it's lying), and voila - you have a route and a timeline for your icon to follow.

There is one big hurdle, and it's taken up a decent amount of time to solve to my satisfaction. If you trim any portion of the MP4 that has a GPMF track, the GPMF track becomes unreadle by the libraries I mentioned. It must be because of whatever compression algorithm is being used. The obvious solution is to extract the coordinate data first and then trim both, but that would be super tedious to do manually for every GoPro video I want to trim, so obviously I stood up a local node express server with a simple front-end that lets me pick the trim start and end times, gives me a live preview, trims both the video and metadata, and makes it easy to attach them to a checkin. I'm just trying to enable my artistic side!

The Colorado River checkin (which, as of this writing, no one has peeped yet 👀) is the first example of this in action on the live website, though it doesn't have the moving icon yet. Zoom in on the location of the marker and you'll see the route taken by the video. Eventually I want to make that zoom automatic, and obviously I want that moving icon. There's a lot of design considerations to take into account with the automatic zoom, especially on mobile. That's a story for another devlog post.

Just for fun, here's what the server looks like:
</div>
        <img title="you want hovertext? this isn't xkcd" class="devlog-entry-image" src="content/images/tools_server_screenshot.png" />

<div class="devlog-entry-content">
<b>Links:</b>
<a href="https://github.com/JuanIrache/gpmf-extract">gpmf-extract (Github)</a>
<a href="https://github.com/JuanIrache/gopro-telemetry">gopro-telemetry (Github)</a>
<a href="https://geojson.org/">GeoJSON.org</a>
</div>
        </div>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><span class="devlog-entry-date">Tue Oct 20 2020 9:24PM |</span> I'll add an entry here when I push a change or new feature. It's just meant to be a super simple way to share the technical side of what I'm doing. By the way, did you know that the length limit for peeper names has been increased to 40 chars?</div>
        </div>

        <hr>

        <div class="devlog-entry content-card">
          <div class="devlog-entry-content"><b>SHOUT OUTS</b>

<b>Giulio Finestrali</b> was the original peeper - among other things, he helped with AWS Lambda@Edge and fixing caching problems

<b>Ivan Petkov</b> is constantly checking this thing and giving me feedback - he even caught an XSS vuln and proved it by hacking my mainframe. He also holds the record for most peeps

<b>Jake Jensen</b> has since smashed Ivan's record, including a ridiculous penta peep streak

<b>Ari Richtberg</b> was a soundboard and focus mate as I was fixing caching problems and writing templating logic

<b>Sam Posa</b> aka Tham Potha aka Posa-san gets a shout out just because he asked for one</span>
        </div>
      </div>
    </main>
  </body>
</html>