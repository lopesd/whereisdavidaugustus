// GLOBAL SCOPE
var david
david = david || {}
david.allMapMarkers = {}
david.allMapMarkerTimeouts = []
david.allMapPolylines = []
david.chapters = <%= JSON.pretty_generate(chapters) %>;
david.currentChapterNumber = <%= chapters.size - 1 %>;
david.isMobile = screen.width > <%= MOBILE_CUTOFF_PIXELS %> ? false : true;

// SOME CONSTANTS
const defaultCheckinIconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'
const lastCheckinIconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png'
const highlightedCheckinIconUrl = 'https://maps.google.com/mapfiles/ms/icons/orange-dot.png'

const getPeepUrl = 'https://www.whereisdavidaugustus.com/get_peep'
const postPeepUrl = 'https://www.whereisdavidaugustus.com/peep'

// UTIL
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function sanitize(string) {
  const sanitizeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      "/": '&#x2F;',
  }
  const reg = /[&<>"'/]/ig
  return string.replace(reg, match => sanitizeMap[match])
}

// HTML UTIL
function getChapterContainerEl(chapterNumber) {
  return document.getElementById(`chapter-${chapterNumber}-container`)
}

function getChapterHeaderContainerEl(chapterNumber) {
  return document.getElementById(`chapter-header-${chapterNumber}-container`)
}

// BUTTON CALLBACKS
// header arrow
function leftChapterHeaderArrowClick(event) {
  event.target.blur()
  updateChapterSelection(david.currentChapterNumber - 1)
}

function rightChapterHeaderArrowClick(event) {
  event.target.blur()
  updateChapterSelection(david.currentChapterNumber + 1)
}

// peep button!
async function onClickPeepButton(event) {
  const buttonEl = event.target
  const peeperPaneEl = buttonEl.parentElement
  const wrapperEl = peeperPaneEl.parentElement
  const nameInputEl = peeperPaneEl.querySelector('.peeper-name-input')
  const peeperName = nameInputEl.value
  if (!peeperName) {
    nameInputEl.placeholder = 'name is required dummy'
    return
  }
  const commentInputEl = peeperPaneEl.querySelector('.peeper-comment-input')
  const comment = commentInputEl.value

  // enter loading state
  buttonEl.disabled = true
  buttonEl.innerHTML = '...'
  nameInputEl.disabled = true
  commentInputEl.placeholder = 'no comment? :('
  commentInputEl.disabled = true

  // send post
  const checkinId = peeperPaneEl.dataset.checkinId
  let peep
  try {
    peepData = await postPeep(checkinId, peeperName, comment)
    console.log('received: ', peepData)
  } catch (e) {
    console.error(e)
    wrapperEl.innerHTML = renderPeeperPane({ errored: true })
    return
  }

  // exit loading state and update html
  wrapperEl.innerHTML = renderPeeperPane({
    attemptedPeeper: peeperName,
    peep: peepData.peep
  })
}

// Don't trigger a click on the checkin if you click in the peeper pane
// This prevents a bug where the user can't type in the pane because it 
// scrolled out of the way.
function peeperPaneClick(e) {
  e.stopPropagation()
}

// AJAX CALLS
// helper function to make a fetch call with a json body and response
async function jsonFetch(url, body) {
  const params = {
    method: 'POST',
    mode: 'same-origin',
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: { 'Content-Type': 'application/json' },
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
    body: JSON.stringify(body)
  }
  const resp = await fetch(url, params)
  return resp.json()
}

// get data for a peep
async function getPeep(checkinId) {
  return jsonFetch(getPeepUrl, { checkinId })
}

// claim a peep
async function postPeep(checkinId, peeper, comment) {
  return jsonFetch(postPeepUrl, { checkinId, peeper, comment })
}

// HIGHLIGHT
function highlightCheckinAndMarker(checkinId) {
  // marker
  const marker = david.allMapMarkers[checkinId]
  if (marker) {
    marker.setIcon(highlightedCheckinIconUrl)
    marker.setZIndex(500)
  }

  // checkin div
  const checkinDiv = document.getElementById(`checkin-content-${checkinId}`)
  checkinDiv.classList.add('mouse-over-highlight')
}


async function unHighlightCheckinAndMarker(checkinId) {
  const checkins = david.chapters[david.currentChapterNumber].checkins
  // marker
  const marker = david.allMapMarkers[checkinId]
  if (marker) {
    const isLastCheckin = checkins[checkins.length-1].checkinId === checkinId && (david.chapters.length-1 === david.currentChapterNumber)
    if (isLastCheckin) {
      marker.setIcon(lastCheckinIconUrl)
    } else {
      marker.setIcon(defaultCheckinIconUrl)
    }
    marker.setZIndex(undefined)
  }

  // checkin div
  const checkinDiv = document.getElementById(`checkin-content-${checkinId}`)
  checkinDiv.classList.remove('mouse-over-highlight')
}

// SCROLL CHECKIN INTO VIEW
function scrollCheckinIntoView(checkinId) {
  const checkinAnchor = document.getElementById(`checkin-content-anchor-${checkinId}`)
  checkinAnchor.scrollIntoView({ behavior: 'smooth' })
}


// ON MAP LOAD
async function onMapsApiLoad() {
  // CREATE MAP AND CONFIGURE BOUNDS
  const map = new google.maps.Map(document.getElementById('map'), {
    disableDefaultUI: true,
    gestureHandling: 'cooperative'
  })
  david.map = map

  // create the circular path marker for gopro videos, invisible for now
  david.pathMarker = new google.maps.Marker({
    map: david.map,
    icon: {
      path: google.maps.SymbolPath.CIRCLE,
      scale: 6,
      strokeColor: "#393",
    },
    visibility: false
  })

  updateMapForChapterSelection(david.currentChapterNumber)
}

// UPDATE MAP FOR NEW CHAPTER 
// Remove existing markers and lines, stop existing marker pop-in animation,
// add new markers, set up their callbacks, and kick off their animations
function updateMapForChapterSelection(chapterNumber) {
  const map = david.map

  // delete existing timeouts, markers and polylines
  david.allMapMarkerTimeouts.forEach(timer => clearTimeout(timer))
  david.allMapMarkerTimeouts = []

  Object.values(david.allMapMarkers).forEach(marker => marker.setMap(null))
  david.allMapMarkers = {}

  david.allMapPolylines.forEach(polyline => polyline.setMap(null))
  david.allMapPolylines = []

  // fit maps to the bounds of the checkin locations
  const checkins = david.chapters[chapterNumber].checkins
  const bounds = new google.maps.LatLngBounds()
  checkins.forEach(({ latlng, path }) => {
    if (latlng) {
      bounds.extend(latlng)
    } else if (path) {
      path.forEach(latlng => bounds.extend(latlng))
    }
  })
  map.fitBounds(bounds)
  google.maps.event.addListenerOnce(map, 'bounds_changed', () => {
    map.setZoom(Math.min(10, map.getZoom()));
  })

  // create checkin markers
  const addCheckinMarker = (checkin, isLastCheckin) => {
    if (checkin.latlng) {
      let icon = { url: defaultCheckinIconUrl }
      if (isLastCheckin) {
        icon = { url: lastCheckinIconUrl }
      }
      const marker = new google.maps.Marker({
        position: checkin.latlng,
        animation: google.maps.Animation.BOUNCE,
        icon,
        map
      })
      marker.addListener("mouseover", () => highlightCheckinAndMarker(checkin.checkinId))
      marker.addListener("mouseout", () => unHighlightCheckinAndMarker(checkin.checkinId))
      marker.addListener("click", () => scrollCheckinIntoView(checkin.checkinId))
      david.allMapMarkers[checkin.checkinId] = marker
      setTimeout(() => marker.setAnimation(null), 400)
    }

    if (checkin.videos) {
      checkin.videos.forEach(async ({ path }) => {
        if (!path) return
        const polyline = new google.maps.Polyline({ path, map })
        david.allMapPolylines.push(polyline)
      })
    }
  }

  // animate the markers as they enter the screen
  const pathAnimationMaxTime = 3000 // in ms, longest total amount of time the whole path should take to pop up
  const pathAnimationStepMin = 300 // in ms, shortest amount of time allowed between each marker popping up
  const pathAnimationDelay = 600 // in ms, initial delay before path begins popping up

  const pathAnimationStep = Math.min(pathAnimationMaxTime / checkins.length, pathAnimationStepMin)
  for (var i = 0; i < checkins.length; ++i) {
    const checkin = checkins[i]
    const isLastCheckin = i === checkins.length - 1 && david.chapters.length-1 === chapterNumber
    const timer = setTimeout(function () {
      addCheckinMarker(checkin, isLastCheckin)
    }, i * pathAnimationStep + pathAnimationDelay)
    david.allMapMarkerTimeouts.push(timer)
  }
}

// swap the visibility of the rendered chapters to the current one
function updateChapterContentForNewChapterSelection(currentChapterNumber, newChapterNumber) {
  let left = true
  if (newChapterNumber < currentChapterNumber) {
    left = false
  }
  const currentChapterContainer = document.querySelector('.chapter-container.current-chapter')
  const currentChapterHeaderContainer = document.querySelector('.chapter-header-container.current-chapter')
  const nextChapterContainer = getChapterContainerEl(newChapterNumber)
  const nextChapterHeaderContainer = getChapterHeaderContainerEl(newChapterNumber)

  // disable arrow buttons
  document.querySelectorAll('.chapters-header-arrow').forEach(el => el.disabled = true)
  
  if (david.isMobile) {
    // on mobile, don't animate for perf reasons
    currentChapterContainer.classList.remove('current-chapter')
    currentChapterHeaderContainer.classList.remove('current-chapter')
    nextChapterContainer.classList.add('current-chapter')
    nextChapterHeaderContainer.classList.add('current-chapter')
    document.querySelectorAll('.chapters-header-arrow').forEach(el => el.disabled = false)
  } else {
    // on desktop, animate header and checkins
    const tl = gsap.timeline()
    tl.fromTo([currentChapterContainer, currentChapterHeaderContainer], {
      x: 0,
      alpha: 1
    }, {
      x: left ? -10 : 10,
      alpha: 0,
      duration: 0.2,
      ease: 'expo.out'
    }).call(() => {
      currentChapterContainer.classList.remove('current-chapter')
      currentChapterHeaderContainer.classList.remove('current-chapter')
      nextChapterContainer.classList.add('current-chapter')
      nextChapterHeaderContainer.classList.add('current-chapter')

      document.getElementById('checkins-anchor').scrollIntoView()
      document.getElementById('map-anchor').scrollIntoView()
    }).fromTo([nextChapterContainer, nextChapterHeaderContainer], {
      x: left ? 10 : -10,
      alpha: 0
    }, {
      x: 0,
      alpha: 1,
      duration: 0.2,
      ease: 'linear'
    }).call(() => {
      // re-enable arrows
      document.querySelectorAll('.chapters-header-arrow').forEach(el => el.disabled = false)
    })
  }
}

function updateArrowsForChapterSelection(newChapterNumber) {
  const leftArrowEl = document.querySelector('.chapters-header-arrow.left')
  const rightArrowEl = document.querySelector('.chapters-header-arrow.right')
  leftArrowEl.classList.remove('hidden')
  rightArrowEl.classList.remove('hidden')
  if (newChapterNumber === 0) {
    leftArrowEl.classList.add('hidden')
  }
  if (newChapterNumber === david.chapters.length - 1) {
    rightArrowEl.classList.add('hidden')
  }
}

// UPDATE CHAPTER SELECTION 
// change global variable indicating current chapter, call all update functions
function updateChapterSelection(newChapterNumber) {
  updateChapterContentForNewChapterSelection(david.currentChapterNumber, newChapterNumber)
  updateMapForChapterSelection(newChapterNumber)
  updateArrowsForChapterSelection(newChapterNumber)
  david.currentChapterNumber = newChapterNumber
}

// ON DOCUMENT LOAD
document.addEventListener("DOMContentLoaded", () => {
  // add listeners to chapter header arrows
  document.querySelectorAll('.chapters-header-arrow.left').forEach(arrowEl => {
    arrowEl.addEventListener('click', leftChapterHeaderArrowClick)
  })
  document.querySelectorAll('.chapters-header-arrow.right').forEach(arrowEl => {
    arrowEl.addEventListener('click', rightChapterHeaderArrowClick)
  })

  // add listeners to map controls
  document.getElementById('map-down-arrow').addEventListener('click', () => {
    document.getElementById('checkins-anchor').scrollIntoView({ behavior: 'smooth' })
  })

  // add listeners to video elements
  document.querySelectorAll('.checkin-video').forEach(videoElement => {
    // pause all other videos when a video plays
    videoElement.addEventListener('play', () => {
      document.querySelectorAll('.checkin-video').forEach(otherVideoElement => {
        if (otherVideoElement !== videoElement) {
          otherVideoElement.pause()
        }
      })
    })

    // erase the path marker when a video pauses
    videoElement.addEventListener('pause', () => {
      david.pathMarker.setVisible(false) 
    })

    // update the path marker as the video plays
    videoElement.addEventListener('timeupdate', () => {
      // place a marker along the path
      const video = david.allCheckinVideos[videoElement.dataset.videoName]
      if (!video.path) return
      const index = video.path.findIndex(t => t.ms > videoElement.currentTime*1000)
      const position = video.path[index]
      david.pathMarker.setPosition(position)
      david.pathMarker.setVisible(true)
    })
  })

  // CHECK PEEP AVAILABILITY
  document.querySelectorAll('.checkin-peeper-pane.loading').forEach(async el => {
    let peep
    try {
      peepData = await getPeep(el.dataset.checkinId)
    } catch (e) {
      console.error(e)
      el.parentElement.innerHTML = renderPeeperPane({ errored: true })
      return
    }
    el.parentElement.innerHTML = renderPeeperPane({ peep: peepData.peep })
  })
})

  // WORK IN PROGRESS 
  // Code to highlight the checkin that has been scrolled to
  // Note - include GSAP for this to work
  /*
  reversedCheckins.forEach(checkin => {
    const element = document.getElementById(`checkin-content-${checkin.checkinId}`) 
    ScrollTrigger.create({
      trigger: element,
      scroller: '#checkins-pane',
      start: "top center",
      end: "bottom center",
      onToggle: self => {
        if (self.isActive) {
          highlightCheckinAndMarker(checkin.checkinId)
          if (david.map) {
            david.map.panTo(checkin.latlng)
          }
        } else {
          unHighlightCheckinAndMarker(checkin.checkinId)
        }
      }
    })
  })
  */